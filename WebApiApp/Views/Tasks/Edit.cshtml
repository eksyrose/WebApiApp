@model WebApiApp.Tasks

@{
    ViewBag.Title = "Edit";
}



@* @using (Html.BeginForm())
     {
            @Html.AntiForgeryToken()



    <div class="modal-content">
        <div class="modal-header">
            <button class="close" data-dismiss="modal" area-hidden="true" onclick='goBack()'>X</button>
        </div>
        <div class="modal-body">
            <h4>Edit the task</h4> *@
<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#editModal">
    Edit task
</button>

<!-- Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Edit</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Status)
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                    <input type="reset" value="Cancel" onclick='goBack()' class="btn btn-default" />
                </div>
            </div>
}
            </div>
            <div class="modal-footer">
              @*  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button> *@
             @*   <button type="button" class="btn btn-primary">Save changes</button> *@
            </div>
        </div>
        </div>
    </div>
                
        @*  <div>
                @Html.ActionLink("Back to List", "Index")
            </div> *@

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")

            <script type='text/javascript'>
                function goBack() {
                    window.history.back();
                }
            </script>
        }
